name: Release

on:
  push:
    tags:
    - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Checkout Submodule
      run: git submodule update --init --recursive

    - name: Prepare Environment
      run: sudo apt update && sudo apt install -y pkg-config libffi-dev make zlib1g-dev

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build && cmake -E make_directory ${{runner.workspace}}/.third-party-build

    - name: Cache Third-Party
      id: third-party-cache
      uses: actions/cache@v2
      with:
        path: ${{runner.workspace}}/third-party/.deps
        key: ${{ runner.os }}-${{ hashFiles('**/third-party/CMakeLists.txt') }}

    - name: Configure Third-Party
      if: steps.third-party-cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{runner.workspace}}/.third-party-build
      run: cmake $GITHUB_WORKSPACE/third-party -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build Third party
      if: steps.third-party-cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/.third-party-build
      shell: bash
      run: make

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: make

    - name: Pack binary
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: tar -czvf jk-build.tar.gz jk

    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Update Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{runner.workspace}}/build/jk-build.tar.gz
        asset_name: jk-build-${{ github.ref }}.tar.gz
        asset_content_type: application/tar+gzip

